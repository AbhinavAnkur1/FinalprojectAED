/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package MainUserInterface.Doctor;

import BusinessModel.Ecosystem;
import BusinessModel.Labs.Tests;
import BusinessModel.Patient.PatientBills;
import BusinessModel.Patient.Patient;
import BusinessModel.Pharma.Medicine;
import BusinessModel.UserAccount.User;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author daddy
 */
public class DoctorRequestMedicineJPanel extends javax.swing.JPanel {

    /** Creates new form DoctorRequestMedicineJPanel */
    
    private JPanel userProCont;
    private Ecosystem ecosystem;
    private User userAcc;
    private Patient pat;
    Medicine medicine;
    ArrayList<Medicine> samples=new ArrayList<Medicine>();

    
    public DoctorRequestMedicineJPanel(JPanel userProcessContainer, User account, Ecosystem ecosystem, Patient patient) {
        initComponents();
        this.userProCont = userProcessContainer;
        this.ecosystem = ecosystem;
        this.userAcc = account;
        this.pat = patient;
        populateAvailableMedicineTable();
    }

    
        private void populateAvailableMedicineTable() {
        DefaultTableModel model = (DefaultTableModel) availableMedicineTable.getModel();

        model.setRowCount(0); 

        for (Medicine t : ecosystem.getPharma().getmedList()) {

            
               Object[] row = new Object[4];                
                row[0] = t;
                row[1] = t.getMedUsage();
                row[2] =t.getMedQuant();
                row[3] = t.getMedPrice();
                model.addRow(row);
        }
    }
        
        public void populateMedicineCart(Medicine item){
        DefaultTableModel model = (DefaultTableModel) selectedMedicineTable.getModel();
        model.setRowCount(0);
        
         samples.add(item);
         Object[] row = new Object[4];
                for(Medicine t:samples){
                     row[0] = t;
                row[1] = t.getMedUsage();
                row[2] =t.getMedQuant();
                row[3] = t.getMedPrice();
                model.addRow(row);
                }  
     }
    private void populatePatientTable() {
        //DefaultTableModel model = (DefaultTableModel) tableAddedLabTest.getModel();

        //model.setRowCount(0);

        for (Patient patient : ecosystem.getPatientDirect().getPatientList()) {

            Object[] row = new Object[7];
            row[0] = patient.getpUserName();
            row[1] = patient.getpHealthInsuranceID();
            row[2] = patient.getpFirstName();
            row[3] = patient.getpLastName();
            row[4] = patient.getpAge();
            row[5] = patient.getpAddress();
            row[6] = patient.getpEmailAddress();
            
          //  model.addRow(row);

        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        selectedMedicineTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        availableMedicineTable = new javax.swing.JTable();
        removeMedicineBtn = new javax.swing.JButton();
        addMedicineBtn = new javax.swing.JButton();
        requestMedicineBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 102, 102));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Futura", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Request Medicines");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 40, 400, -1));

        selectedMedicineTable.setBackground(new java.awt.Color(204, 255, 204));
        selectedMedicineTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 204)));
        selectedMedicineTable.setFont(new java.awt.Font("Futura", 1, 14)); // NOI18N
        selectedMedicineTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Med Name", "Med Usage", "Quantity", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(selectedMedicineTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 160, 500, 170));

        availableMedicineTable.setBackground(new java.awt.Color(204, 204, 204));
        availableMedicineTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 204)));
        availableMedicineTable.setFont(new java.awt.Font("Futura", 1, 14)); // NOI18N
        availableMedicineTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Med Name", "Med Usage", "Quantity", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(availableMedicineTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 510, 170));

        removeMedicineBtn.setBackground(new java.awt.Color(255, 0, 0));
        removeMedicineBtn.setFont(new java.awt.Font("Futura", 0, 12)); // NOI18N
        removeMedicineBtn.setForeground(new java.awt.Color(255, 255, 255));
        removeMedicineBtn.setText("<< REMOVE");
        removeMedicineBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 51)));
        removeMedicineBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeMedicineBtnActionPerformed(evt);
            }
        });
        add(removeMedicineBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 250, 120, 46));

        addMedicineBtn.setBackground(new java.awt.Color(204, 255, 204));
        addMedicineBtn.setFont(new java.awt.Font("Futura", 0, 12)); // NOI18N
        addMedicineBtn.setForeground(new java.awt.Color(0, 102, 102));
        addMedicineBtn.setText("ADD >>");
        addMedicineBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 204)));
        addMedicineBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMedicineBtnActionPerformed(evt);
            }
        });
        add(addMedicineBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 190, 120, 47));

        requestMedicineBtn.setFont(new java.awt.Font("Futura", 0, 12)); // NOI18N
        requestMedicineBtn.setForeground(new java.awt.Color(255, 0, 51));
        requestMedicineBtn.setText("REQUEST MEDICINE");
        requestMedicineBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        requestMedicineBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestMedicineBtnActionPerformed(evt);
            }
        });
        add(requestMedicineBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 380, 180, 42));

        backBtn.setFont(new java.awt.Font("Futura", 0, 12)); // NOI18N
        backBtn.setForeground(new java.awt.Color(255, 0, 51));
        backBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MainUserInterface/Images/back.png"))); // NOI18N
        backBtn.setText(" BACK");
        backBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 30, 140, 42));

        jLabel2.setFont(new java.awt.Font("Futura", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Available Medicine");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 130, -1, -1));

        jLabel3.setFont(new java.awt.Font("Futura", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Selected Medicine");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 130, -1, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MainUserInterface/Images/request.png"))); // NOI18N
        jLabel4.setText("jLabel4");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 30, 30, 50));
    }// </editor-fold>//GEN-END:initComponents

    private void removeMedicineBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeMedicineBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = selectedMedicineTable.getSelectedRow();
        if(selectedRow<0)
        {
            JOptionPane.showMessageDialog(null,"Please select a row from the table to view details","Warning",JOptionPane.WARNING_MESSAGE);
        }
        else{
            Medicine item=(Medicine)selectedMedicineTable.getValueAt(selectedRow, 0);
            samples.remove(item);
            DefaultTableModel model = (DefaultTableModel) selectedMedicineTable.getModel();
        model.setRowCount(0);
            Object[] row = new Object[4];
                for(Medicine t:samples){
                        row[0] = t;
                row[1] = t.getMedUsage();
                row[2] =t.getMedQuant();
                row[3] = t.getMedPrice();
                model.addRow(row);
                }
        }
     
    }//GEN-LAST:event_removeMedicineBtnActionPerformed

    private void addMedicineBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMedicineBtnActionPerformed
        // TODO add your handling code here:
                int selectedRow = availableMedicineTable.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null,"Please select a row from the table to view details","Warning",JOptionPane.WARNING_MESSAGE);
        }
        else{
            Medicine item=(Medicine)availableMedicineTable.getValueAt(selectedRow, 0);
            
            populateMedicineCart(item);
          
        }
    }//GEN-LAST:event_addMedicineBtnActionPerformed

    private void requestMedicineBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestMedicineBtnActionPerformed
        // TODO add your handling code here:
        if(samples.size()==0){
            JOptionPane.showMessageDialog(null,"Please add test to the cart.","Warning",JOptionPane.WARNING_MESSAGE);

        }
        else{
            for(Medicine t:samples){
                //String itemName,String organization1,float itemAmount, String result, String itemStatus

                PatientBills bill = new PatientBills(t.getMedName(), "Pharmacy", t.getMedPrice(),"","Requested");
                pat.addbill(bill);
                
                //ecosystem.AddTreatedPatientList(pat);
            }
            ecosystem.getPharma().AddpharmaRecordList(pat);
            pat.setpPharmaStatus("Requested");
            
            DoctorVisitJPanel doctorVisit = new DoctorVisitJPanel(userProCont, userAcc, ecosystem, pat);
            userProCont.add("Visit Doctor", doctorVisit);
            CardLayout layout = (CardLayout) userProCont.getLayout();
            layout.next(userProCont);
        }

    }//GEN-LAST:event_requestMedicineBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        DoctorVisitJPanel doctorVisit = new DoctorVisitJPanel(userProCont, userAcc, ecosystem, pat);
        userProCont.add("Visit Doctor", doctorVisit);
        CardLayout layout = (CardLayout) userProCont.getLayout();
        layout.next(userProCont);
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addMedicineBtn;
    private javax.swing.JTable availableMedicineTable;
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton removeMedicineBtn;
    private javax.swing.JButton requestMedicineBtn;
    private javax.swing.JTable selectedMedicineTable;
    // End of variables declaration//GEN-END:variables

}
